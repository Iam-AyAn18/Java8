1. ProceedingJoinPoint vs JoinPoint?
Answer : JoinPoint is the core interface in AspectJ that represents a point during the execution of a program. 
It provides access to information about the current joinpoint, which is a specific point in the execution of a program where an aspect can be applied. 
JoinPoint allows you to obtain information such as the method being executed, its arguments, the target object, and more. 
However, JoinPoint doesn't provide the ability to proceed with the execution of the intercepted method.

ProceedingJoinPoint is a subinterface of JoinPoint and provides additional functionality specifically for advice that needs to proceed with the execution of the intercepted method. 
It extends JoinPoint and adds methods like proceed() and proceed(Object[] args) that allow you to continue the execution of the intercepted method or modify its arguments.
used in @around

2.Joint Point vs Point Cut:
Answer : A joinpoint is a candidate point in the Program Execution of the application where an aspect can be plugged in. 
This point could be a method being called, an exception being thrown, or even a field being modified.

Advice represents the code that executes at specific join points, as defined by the pointcut. 
There are different types of advice, such as "before," "after," "around," etc. Each type of advice allows you to execute code at different points in the program's execution.

A pointcut defines at what joinpoints, the associated Advice should be applied. 
Advice can be applied at any joinpoint supported by the AOP framework. 
Of course, you don’t want to apply all of your aspects at all of the possible joinpoints.


3. Scope in Maven:
Answer:
In Maven, the `scope` attribute is used to specify the visibility and accessibility of a dependency within different phases of a project's build lifecycle. 
It determines when the dependency will be available during compilation, testing, packaging, and runtime. The `scope` attribute is used within the `<dependency>` element in the project's `pom.xml` file.

Here are the commonly used values for the `scope` attribute in Maven:

1. **compile:**
   This is the default scope. Dependencies with the `compile` scope are available during compilation and are also included in the runtime classpath. 
   These dependencies are required for both compiling the code and running the application.

2. **provided:**
   Dependencies with the `provided` scope are expected to be provided by the JDK or the runtime environment when the application is executed. 
   These dependencies are available during compilation but are not included in the runtime classpath. This scope is often used for Java EE APIs that are provided by the application server.

3. **runtime:**
   Dependencies with the `runtime` scope are not needed during compilation, but they are required during runtime. 
   These dependencies are included in the runtime classpath but not in the compile classpath.

4. **test:**
   Dependencies with the `test` scope are used only during testing. They are available during the test compilation and execution phases but are not included in the runtime classpath. 
   These dependencies are not packaged with the application.

5. **system:**
   Dependencies with the `system` scope are similar to `compile`, but you need to provide the path to the dependency explicitly using the `<systemPath>` element. 
   This is typically used for dependencies not available in Maven repositories.

6. **import:**
   The `import` scope is used only in Maven 2. It's used to include dependencies that are "imported" from another POM file. This scope is not used in Maven 3 and later versions.
   
   
4. Kafka Concepts:
Answer:
one to one -> point to point
one to many -> publisher subscriber

producer and consumer
topics, kafka cluster


4. Cascading in hibernate
Answer : 

Hibernate provides several types of cascade options that can be used to manage the relationships between entities.
CascadeType.ALL
CascadeType.PERSIST
CascadeType.MERGE
CascadeType.REMOVE
CascadeType.REFRESH
CascadeType.DETACH
CascadeType.REPLICATE
CascadeType.SAVE_UPDATE

5. @service and @component
Answer:
Both annotations allow Spring to automatically detect and register the annotated class as a Spring-managed component during component scanning.
Spring will create an instance of the annotated class and manage its lifecycle as a bean within the application context.

@Service is intended to annotate classes that represent business services or service layer components in a Spring application.
@Component is a more generic stereotype annotation that can be used to annotate any Spring-managed bean, regardless of its specific role or purpose.

6. @bean annotation in spring boot
Answer:
1. Declaring Beans:You can annotate methods with @Bean in a Spring configuration class to declare beans. These methods are responsible for creating and configuring instances of beans.
@configuration
class classname{
@bean
public MyBean myBean(){
return new MyBean();
}
}

2. Bean Configuration:You can also use @Bean to configure bean properties, dependencies, and lifecycle callbacks within the method.
@Bean
public DataSource dataSource()
{
DataSource dataSource = new DataSource();
dataSource.url("/xyz");
dataSource.password("asdf");
return dataSource;
}

3. Injection of Beans:Beans declared with @Bean can be injected into other beans or components using constructor injection, setter injection, or @Autowired.
@Autowired
private MyBean myBean;

7. Scope of @Bean in spring boot
Answer:
The scope of a bean determines the lifecycle and visibility of instances managed by the Spring IoC (Inversion of Control) container.
A. Singleton:
The singleton scope is the default scope in Spring Boot.
In this scope, the Spring IoC container creates and manages a single instance of the bean per container.

@Bean
@Scope("singleton")
public MyBean myBean() {
    return new MyBean();
}

B. Prototype:
In the prototype scope, the Spring IoC container creates a new instance of the bean every time it is requested.
Each request for the bean results in a new independent instance being returned.

@Bean
@Scope("prototype")
public MyBean myBean() {
    return new MyBean();
}

C. Request:
A new instance of the bean is created for each HTTP request, and it is destroyed once the request is completed.

D. Session:
A single instance of the bean is created per HTTP session, and it is destroyed when the session expires or is invalidated.

E. Application:
The application scope is specific to the Servlet Context in a web application.
A single instance of the bean is created per Servlet Context, and it is destroyed when the Servlet Context is destroyed.


8. @bean vs @component
Answer:
@Bean
It is used to explicitly declare a single bean, rather than letting Spring do it automatically. 
We should use @bean, if you want specific implementation based on dynamic condition.

@Component
If any class is annotated with @Component it will be automatically detect by using classpath scan.
We can’t write specific implementation based on dynamic condition

9. @PostContrust @PreDestory annotations
Answer:
@PostConstruct and @PreDestroy annotations also do the same work as initMethod and destroyMethod do. 
The main difference is that initMethod and destroyMethod are passed as parameters to @Bean annotation, 
where as @PostConstruct and @PreDestroy are annotations applied to methods of the bean class itself.

10. Why @Transient annontation is used in spring boot.
Answer:
When you mark a field with @Transient, it instructs the JPA provider (e.g., Hibernate) to exclude that field from being persisted to the database. 
This means that the field will not be mapped to any database column and will not be stored when an entity object is saved to the database.