1. ProceedingJoinPoint vs JoinPoint?
Answer : JoinPoint is the core interface in AspectJ that represents a point during the execution of a program. 
It provides access to information about the current joinpoint, which is a specific point in the execution of a program where an aspect can be applied. 
JoinPoint allows you to obtain information such as the method being executed, its arguments, the target object, and more. 
However, JoinPoint doesn't provide the ability to proceed with the execution of the intercepted method.

ProceedingJoinPoint is a subinterface of JoinPoint and provides additional functionality specifically for advice that needs to proceed with the execution of the intercepted method. 
It extends JoinPoint and adds methods like proceed() and proceed(Object[] args) that allow you to continue the execution of the intercepted method or modify its arguments.
used in @around

2.Joint Point vs Point Cut:
Answer : A joinpoint is a candidate point in the Program Execution of the application where an aspect can be plugged in. 
This point could be a method being called, an exception being thrown, or even a field being modified.

Advice represents the code that executes at specific join points, as defined by the pointcut. 
There are different types of advice, such as "before," "after," "around," etc. Each type of advice allows you to execute code at different points in the program's execution.

A pointcut defines at what joinpoints, the associated Advice should be applied. 
Advice can be applied at any joinpoint supported by the AOP framework. 
Of course, you donâ€™t want to apply all of your aspects at all of the possible joinpoints.


3. Scope in Maven:
Answer:
In Maven, the `scope` attribute is used to specify the visibility and accessibility of a dependency within different phases of a project's build lifecycle. 
It determines when the dependency will be available during compilation, testing, packaging, and runtime. The `scope` attribute is used within the `<dependency>` element in the project's `pom.xml` file.

Here are the commonly used values for the `scope` attribute in Maven:

1. **compile:**
   This is the default scope. Dependencies with the `compile` scope are available during compilation and are also included in the runtime classpath. 
   These dependencies are required for both compiling the code and running the application.

2. **provided:**
   Dependencies with the `provided` scope are expected to be provided by the JDK or the runtime environment when the application is executed. 
   These dependencies are available during compilation but are not included in the runtime classpath. This scope is often used for Java EE APIs that are provided by the application server.

3. **runtime:**
   Dependencies with the `runtime` scope are not needed during compilation, but they are required during runtime. 
   These dependencies are included in the runtime classpath but not in the compile classpath.

4. **test:**
   Dependencies with the `test` scope are used only during testing. They are available during the test compilation and execution phases but are not included in the runtime classpath. 
   These dependencies are not packaged with the application.

5. **system:**
   Dependencies with the `system` scope are similar to `compile`, but you need to provide the path to the dependency explicitly using the `<systemPath>` element. 
   This is typically used for dependencies not available in Maven repositories.

6. **import:**
   The `import` scope is used only in Maven 2. It's used to include dependencies that are "imported" from another POM file. This scope is not used in Maven 3 and later versions.
   
   
4. Kafka Concepts:
Answer:
one to one -> point to point
one to many -> publisher subscriber

producer and consumer
topics, kafka cluster
